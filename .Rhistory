multinom(Q050 ~ Q060.1, data = temp)
multinom(Q050 ~ , data = temp)
multinom(paste("Q050 ~ ", paste(selected.vars, collapse="+")), data = temp)
multi = multinom(paste("Q050 ~ ", paste(selected.vars, collapse="+")), data = temp)
plot(multi)
predict(multi, binary.data[1:10, selected.vars])
filtered.data$Q050[1:10]
filtered.data$Q050[sampled][1:10]
filtered.data$Q050[sampled][1:20]
predict(multi, binary.data[1:20, selected.vars])
filtered.data$Q050[sampled][40:70]
predict(multi, binary.data[40:70, selected.vars])
binary.data = read.table("binary-ling-data.data", header=T)
sampled = sample(x=1:nrow(binary.data), size=5966)
binary.data.sampled = binary.data[sampled,]
binary.vars = grep("Q", names(binary.data), value=T)
selected.vars = binary.vars[65:107] # Q60-64
binary.dist = dist(binary.data.sampled[, selected.vars])
tree = hclust(binary.dist)
hclust.labels = cutree(tree, h=3)
colors = rainbow(max(hclust.labels))# brewer.pal(name='Blues',n=max(hclust.labels))
plot(binary.data.sampled[, "lat"], binary.data.sampled[, "long"], col=colors[hclust.labels], xlab="latitude", ylab="longtitude", pch=20, main="Clusters from Hierarchical Clustering")
kmeans.labels = kmeans(binary.data[, selected.vars], centers=max(hclust.labels))$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[kmeans.labels], xlab="latitude", ylab="longtitude", pch=20, main="Clusters from K-means")
train = sample(1:nrow(binary.data), size=5000)
test = sample(diff(1:nrow(binary.data), train), size=5000)
?diff
test = sample(setdiff(1:nrow(binary.data), train), size=5000)
test
train = sample(1:nrow(binary.data), size=5000)
test = sample(setdiff(1:nrow(binary.data), train), size=5000)
predicted.vars = vars[1:5] # Q50-Q54
temp = cbind(filtered.data[train, predicted.vars], binary.data[train, selected.vars])
multi.q50 = multinom(paste("Q050 ~ ", paste(selected.vars, collapse="+")), data = temp)
library("nnet")
multi.q50 = multinom(paste("Q050 ~ ", paste(selected.vars, collapse="+")), data = temp)
?multinom
multi.q50 = multinom(paste("Q050 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.q50 = predict(multi.q50, binary.data[test, selected.vars])
predicted.q50
actual.q50 = filtered.data[test, predicted.vars]
summary(predicted.q50 == actual.q50)
predicted.q50 == actual.q50
predicted.q50
actual.q50
actual.q50 = filtered.data[test, "Q50"]
summary(predicted.q50 == actual.q50)
predicted.q50 == actual.q50
actual.q50 = filtered.data[test, "Q50"]
actual.q50
actual.q50 = filtered.data[test, "Q050"]
summary(predicted.q50 == actual.q50)
sum(predicted.q50 == actual.q50) / length(test)
print(sum(predicted.q50 == actual.q50) / length(test))
print(1 / max(filtered.data[test, "Q050"]))
print("Rate of random classifier:")
print(1 / max(filtered.data[test, "Q050"]))
print("Rate of this classifier:")
print(sum(predicted.q50 == actual.q50) / length(test))
multi.qs = multinom(paste(paste(predicted.vars, collapse="+"), " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.qs = predict(multi.qs, binary.data[test, selected.vars])
print(sum(predicted.qs == actual.qs) / length(test))
actual.qs = filtered.data[test, predicted.vars]
print(sum(predicted.qs == actual.qs) / length(test))
filtered.data[test, predicted.vars]
predicted.qs
dim(filtered.data[test, predicted.vars])
dim(predicted.qs)
length(predicted.qs)
multi.q51 = multinom(paste("Q051 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.q51 = predict(multi.q51, binary.data[test, selected.vars])
actual.q51 = filtered.data[test, "Q051"]
print("Using answers from Q60-64 to classify answer of Q51:")
print("Rate of random classifier:")
print(1 / max(filtered.data[test, "Q051"]))
print("Rate of this classifier:")
print(sum(predicted.q51 == actual.q51) / length(test))
multi.q52 = multinom(paste("Q052 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
multi.q52 = multinom(paste("Q052 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.q52 = predict(multi.q52, binary.data[test, selected.vars])
actual.q52 = filtered.data[test, "Q052"]
print("Using answers from Q60-64 to classify answer of Q52:")
print("Rate of random classifier:")
print(1 / max(filtered.data[test, "Q052"]))
print("Rate of this classifier:")
print(sum(predicted.q52 == actual.q52) / length(test))
mode
?mode
print((Mode(actual.q50) / length(test)))
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
print((Mode(actual.q50) / length(test)))
print((Mode(actual.q50) == actual.q50)/ length(test))
(Mode(actual.q50) == actual.q50)
print(sum(Mode(actual.q50) == actual.q50)/ length(test))
print(sum(predicted.q50 == actual.q50) / length(test))
print(sum(Mode(actual.q51) == actual.q51)/ length(test))
print(sum(predicted.q51 == actual.q51) / length(test))
print(sum(Mode(actual.q52) == actual.q52)/ length(test))
print(sum(predicted.q52 == actual.q52) / length(test))
train = sample(1:nrow(binary.data), size=5000)
test = sample(setdiff(1:nrow(binary.data), train), size=5000)
predicted.vars = vars[1:5] # Q50-Q54
temp = cbind(filtered.data[train, predicted.vars], binary.data[train, selected.vars])
library("nnet")
multi.q50 = multinom(paste("Q050 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.q50 = predict(multi.q50, binary.data[test, selected.vars])
actual.q50 = filtered.data[test, "Q050"]
print("Using answers from Q60-64 to classify answer of Q50:")
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
print("Rate of naive classifier:")
print(sum(Mode(actual.q50) == actual.q50)/ length(test))
print("Rate of this classifier:")
print(sum(predicted.q50 == actual.q50) / length(test))
multi.q51 = multinom(paste("Q051 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.q51 = predict(multi.q51, binary.data[test, selected.vars])
actual.q51 = filtered.data[test, "Q051"]
print("Using answers from Q60-64 to classify answer of Q51:")
print("Rate of random classifier:")
print(sum(Mode(actual.q51) == actual.q51)/ length(test))
print("Rate of this classifier:")
print(sum(predicted.q51 == actual.q51) / length(test))
multi.q52 = multinom(paste("Q052 ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted.q52 = predict(multi.q52, binary.data[test, selected.vars])
actual.q52 = filtered.data[test, "Q052"]
print("Using answers from Q60-64 to classify answer of Q52:")
print("Rate of random classifier:")
print(sum(Mode(actual.q52) == actual.q52)/ length(test))
print("Rate of this classifier:")
print(sum(predicted.q52 == actual.q52) / length(test))
multi.q50 = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
for (q in predicted.vars) {
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
?capture.output
for (q in predicted.vars) {
capture.output (
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
)
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
capture.output (
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
predicted = predict(multi, binary.data[test, selected.vars])
{2=2; 2}
for (q in predicted.vars) {
capture.output (
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500),
predicted = predict(multi, binary.data[test, selected.vars]),
actual = filtered.data[test, q]
)
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
vars[1:10]
vars[1:11]
predicted.vars = vars[1:11] # Q50-Q60
temp = cbind(filtered.data[train, predicted.vars], binary.data[train, selected.vars])
for (q in predicted.vars) {
capture.output (
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500),
predicted = predict(multi, binary.data[test, selected.vars]),
actual = filtered.data[test, q]
)
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
print(q)
print(paste(q, " ~ ", paste(selected.vars, collapse="+")))
capture.output (
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500),
predicted = predict(multi, binary.data[test, selected.vars]),
actual = filtered.data[test, q]
)
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
multi = NULL
predicted = NULL
actual = NULL
capture.output (
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500),
predicted = predict(multi, binary.data[test, selected.vars]),
actual = filtered.data[test, q]
)
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
multi = capture.output (
multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
)
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
multi = capture.output (
multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
)
print(summary(multi))
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
multi = NULL
train = function () {
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
}
capture.output ( train())
print(summary(multi))
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
multi = NULL
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
print(summary(multi))
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
print(summary(multi))
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
predicted.vars
for (q in predicted.vars) {
print(q)
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
print(summary(multi))
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
print(q)
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
print(q)
print(summary(multi))
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
print(q)
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
print(q)
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
print(q)
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
print(q)
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
sink()
predicted.vars
for (q in predicted.vars) {
print(q)
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
for (q in predicted.vars) {
sink(file="/dev/null")
multi = multinom(paste(q, " ~ ", paste(selected.vars, collapse="+")), data = temp, maxit=500)
sink()
predicted = predict(multi, binary.data[test, selected.vars])
actual = filtered.data[test, q]
print(paste("Using answers from Q60-64 to classify answer of ", q))
print("Rate of naive classifier:")
print(sum(Mode(actual) == actual)/ length(test))
print("Rate of this classifier:")
print(sum(predicted == actual) / length(test))
}
```
pca = prcomp(binary.data.sampled[, binary.vars])
pca$x
pca$x[1:5]
pca$x[, 1:5]
pca$x[, 1:1]
summary(pca$x[, 1:1])
summary(pca$x[, 1])
summary(pca)
summary(pca$x)
dim(pca$x)
dim(binary.data.sampled[, binary.vars])
pca.scaled = prcomp(binary.data.sampled[, binary.vars], scale.=T)
?prcomp
pca.scaled = prcomp(binary.data[, binary.vars], scale.=T)
summary(pca.scaled)
summary(pca.scaled)
?pca
?prcomp
pca = prcomp(binary.data[, binary.vars])
# look at summary
summary(pca)
pca$rotation
summary(pca.scaled)
summary(pca)
summary(pca.scaled)
trans = inv(pca$rotation)
pinv
?inv
dim(pca$rotation)
trans = solve(pca$rotation)
trans
trans["PC1", ]
barplot(trans["PC1", ])
barplot(trans["PC2", ])
barplot(trans["PC3", ])
barplot(trans["PC1", ], col="red")
par(nrow=c(3,1))
par(nfrow=c(3,1))
par(mfrow=c(3,1))
barplot(trans["PC1", ], main="Title")
barplot(trans["PC1", ], main="Contribution to First PC")
barplot(trans["PC1", ], main="Contribution to First PC")
barplot(trans["PC1", ], main="Contribution to First PC")
barplot(trans["PC2", ], main="Contribution to Second PC")
barplot(trans["PC3", ], main="Contribution to Third PC")
trans = solve(pca.scaled$rotation)
par(mfrow=c(3,1))
barplot(trans["PC1", ], main="Contribution to First PC")
barplot(trans["PC2", ], main="Contribution to Second PC")
barplot(trans["PC3", ], main="Contribution to Third PC")
contrib = abs(trans)[1:4, ]
contrib
contrib = apply(abs(trans)[1:4, ], FUN=sum, MARGIN=c(2))
contrib
boxplot(contrib)
barplot(contrib)
which(contrib >= quantile(contrib, probs=c(0.95)))
?which
ind = which(contrib >= quantile(contrib, probs=c(0.95)))
significant.vars = binary.vars[ind]
significant.vars
ind = which(contrib >= quantile(contrib, probs=c(0.99)))
significant.vars = binary.vars[ind]
significant.vars
pca.scaled$x
dim(pca.scaled$x)
reduced = pca.scaled[, 1:217] # to account for 70% of the observed variance
reduced = pca.scaled$x[, 1:217] # to account for 70% of the observed variance
clusters = kmeans(reduced, centers=k)$cluster
k=3
clusters = kmeans(reduced, centers=k)$cluster
for (k in 3:7) {
clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("Clusters from K-means, k=",k))
}
par(mfrow=c(1,1))
for (k in 3:7) {
clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("Clusters from K-means, k=",k))
}
library(RColorBrewer)
for (k in 3:7) {
colors = brewer.pal(k,"Set3")
clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("Clusters from K-means, k=",k))
}
par(mfrow=c(1,2))
for (k in 3:7) {
colors = brewer.pal(k,"Set3")
clusters = kmeans(binary.data[, binary.vars], centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("Clusters from K-means, k=",k))
reduced.clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[reduced.clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("(Dimension-reduced) Clusters from K-means, k=",k))
}
dim(reduced)
dim(binary.data)
```{r}
par(mfrow=c(2,3))
for (i in c(5, 50, 100, 200, 300, 400)) {
reduced = pca.scaled$x[, 1:i]# to account for 70% of the observed variance
k=5
library(RColorBrewer)
colors = brewer.pal(k,"Set3")
clusters = kmeans(binary.data[, binary.vars], centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("k=5, PC=",i))
reduced.clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[reduced.clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("(Dimension-reduced) k=5, PC=",i))
}
par(mfrow=c(2,3))
for (i in c(5, 50, 100, 200, 300, 400)) {
reduced = pca.scaled$x[, 1:i]# to account for 70% of the observed variance
k=5
library(RColorBrewer)
colors = brewer.pal(k,"Set3")
reduced.clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[reduced.clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("(Dimension-reduced) k=5, PC=",i))
}
par(mfrow=c(2,3))
for (i in c(5, 50, 100, 200, 300, 400)) {
reduced = pca.scaled$x[, 1:i]# to account for 70% of the observed variance
k=5
library(RColorBrewer)
colors = brewer.pal(k,"Set3")
reduced.clusters = kmeans(reduced, centers=k)$cluster
plot(binary.data[, "lat"], binary.data[, "long"], col=colors[reduced.clusters], xlab="latitude", ylab="longtitude", pch=20, main=paste("k=5, PC=",i))
}
